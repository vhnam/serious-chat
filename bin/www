#!/usr/bin/env node

var modules = require('../modules')
	app = require('../app'),
	debug = require('debug')('serious-chat:server'),
	http = require('http'),
	models = require('../models');

// get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '3000');
//app.set('port', port);

// create HTTP Server
var server = http.createServer(app);

//require('../modules/socket')(server);
var chatService = modules.socket(http,app,port);

// listen on provided port, on all network interfaces.
models.sequelize.sync().then(function() {
	//server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string or false.
 *
 * @param  {Object} 				value 				The provided port
 * @return {Number|String|Boolean}	value|port|false	The actual port
 */
function normalizePort(value) {
	var port = parseInt(value, 10);

	if (isNaN(port)) {
		// named pie
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 *
 * @param  {Object} error 	Error exception
 */
function onError(error) {
	if (error.syscall !== 'listen') throw error;

	var bind = typeof port === 'string'
			? 'Pipe ' + port
			: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch(error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use.');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 *
 */
function onListening() {
	var address = server.address();
	var bind = typeof address === 'string'
			? 'pipe ' + address
			: 'port ' + address.port;

	debug('Listening on ' + bind);
}
